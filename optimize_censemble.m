% Set Seed
seed = 314159;
rng( seed );

% Import table
data = readtable( ...
    'combat_features.csv', ...
    'readvariablenames', true ...
    );
predictor_variable_names = { ...
    'left_first_type', ...
    'left_second_type', ...
    'right_first_type', ...
    'right_second_type', ...
    'hp_diff', ...
    'attack_diff', ...
    'defense_diff', ...
    'spatk_diff', ...
    'spdef_diff', ...
    'speed_diff' ...
    };
predictors = data{ :, predictor_variable_names };
response = data{ :, { 'left_side_won' } };
classes = unique( response );
if numel( classes ) > 2
    one_hot_classes = bsxfun( @eq, response( : ), classes );
else
    one_hot_classes = bsxfun( @eq, response( : ), classes( 2 ) );
end
observation_count = size( data, 1 );

% Hyperparameter Optimization
cross_validation_k_fold = 10;
part = cvpartition( ...
    observation_count, ...
    'kfold', cross_validation_k_fold ...
    );
opts = struct( ...
    'showplots', true, ...
    'cvpartition', part ...
    );
bagged_trees_model = fitcensemble( ...
    predictors, response, ...
    'optimizehyperparameters', 'auto', ...
    'hyperparameteroptimizationoptions', opts ...
    );

% Write results to disk
savefig( gcf, 'hyperparameter_optimization_results.fig' );
export_fig( gcf, 'hyperparameter_optimization_results.png' );
save( 'hyperparameter_optimization_results.mat', 'bagged_trees_model' );
results = bagged_trees_model.HyperparameterOptimizationResults.XTrace;
results = addvars( ...
    results, ...
    bagged_trees_model.HyperparameterOptimizationResults.ObjectiveTrace, ...
    'after', size( results, 2 ), ...
    'newvariablenames', 'Objective' ...
    );
results = sortrows( results, 'Objective' );
writetable( results, 'hyperparameter_optimization_results.csv' );

% Test model
optimized_model = crossval( ...
    bagged_trees_model, ...
    'kfold', cross_validation_k_fold ...
    );
[ val_predictions, val_scores ] = kfoldPredict( optimized_model );
val_accuracy = 1 - kfoldLoss( optimized_model, 'lossfun', 'classiferror' );

[ fh, ~, aucs, opt_thresh ] = plot_roc( classes, response, val_scores, get_colors() );
export_fig( fh, 'bagged_trees_model_roc.png' );
cm = confusionmat( response, val_predictions );
cm = array2table( ...
    cm, ...
    'VariableNames', { 'PredLoss', 'PredWin' }, ...
    'RowNames', { 'TrueLoss', 'TrueWin' } ...
    );
writetable( cm, 'bagged_trees_model_confmat.csv' );
%plotConfMat( cm ); % swap to confusionmat on or after R2018b, delete plotConfMat
